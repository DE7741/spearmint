../src/__test__/Assertion.test.jsx
 line 2  = , screen
 line 7  = import userEvent from '@testing-library/user-event';
 line 49 =   // expect()
    // expect(screen.getAllByRole('Query', { name: 'Query' })).toHaveValue('Hello,\nWorld!');

../src/__test__/globalREducer.test.js
line 53 =  // it('should handle LOAD_PROJECT', () => {
  //   const action = { type: 'LOAD_PROJECT', load};
  //   expect(globalReducer(initialState, action)).toEqual({
  //     ...initialState,
  //     isProjectLoaded
  //   })
  // })
line 115 =  // it('should handle DISPLAY_FILE_CODE', () => {

  // })
line 119 = //const filePath = 'src/__tests__/globalReducer.test.js';

../src/__test__/reduxTestCase.test.js
line 4 = import { ReactTestCaseContext } from '../context/reducers/reactTestCaseReducer';
         import { MockDataContext } from '../context/reducers/mockDataReducer';

../scr/__test__/ReduxTestMenu.test.js
line 4 =  actionTypes,

../src/__test__/spec.integra.js
line 3 = const assert = require('assert');

../src/components/BrowserView/BrowserView.jsx
line 3 = import { makeStyles } from '@material-ui/core/styles';
line 89 = // const useStyles = makeStyles(() => ({
  //   FormControlLabel: {
  //     // fontSize doesn't work, but color does work...
  //     fontSize: '1px',
  //     color: 'red',
  //     // ,
  //   },
  // }));

  // const classes = useStyles();
line 176 =  // filter: checkedBoxes.checkedGrayscale ? 'grayscale(100%)' : 'grayscale(0%)', 

../src/components/BrowserView/BrowserView.scss
line 29 =  // background-color: $mint2;
line 34 =  // border: $mint;
  // border-width: .1em;
  // border-radius: 5px;
  // border-style: solid;
line 70 = // button {
//   width: 45px;
//   height: 28px;
//   margin-left: 5px;
//   color: $mint;
//   background-color: $light-gray3;
//   outline: none;
//   border-radius: 4px;
// }

// button:hover {
//   background-color: $mint;
//   color: white;
// }

// #formControlLabel{
//   display: flex;
//   background-color: $mint2;
//   color: "white";
//   size: "20px";
//   margin: "10px";
// }

// #address {
//   width: 89%;
//   height: 28px;
//   border: none;
//   border: 1px solid $light-gray;
//   border-radius: 8px;
//   padding-left: 10px;
// }

../components/EndPointTestComponent/Endpoint.tsx 
line 1 = , { useRef, useEffect } 
line 28 = // declare global {
//   namespace JSX {
//     interface IntrinsicElements {
//       input: { id: number | string };
//     }
//   }
// }

..\src\components\FileDirectory\FileDirectory.jsx
line 49 =    // const fileContent = fs.readFileSync(filePath, 'utf8');
line 68 =  // file.fileName !== '.git' &&

../src/components/ExpotFileModal.module.scss
line 4 = // .grid-container {
//   display: grid;
//   grid-template-areas: 'myArea myArea myArea myArea';
// }
line 20 = // transform: translate(-90%, -50%);
line 33 = // top: 25%;
          // left: 22%;
}
line 44 = // min-width: 876px;
line 95 =   // span {
    //   margin-left: 50px;
    // }
line 245 =  // margin-top: -4px;

../src/components/Modals/Modal.jsx
line 9 =  useCopy,
line 22 = // ipc.on('Modal.shellType', (e, shellType) => {
//   //Check os platform to change cmd for terminal execution
//   let execute = '\n';
//   if (shellType === 'win32') {
//     execute = '\r';
//   }
// });
line 40 =   // const { copySuccess, codeRef, handleCopy } = useCopy();
line 48 =   // const [anchorEl, setAnchorEl] = useState(null);
line 58 =   // const modalStyles = {
            //   overlay: {
            //     zIndex: 3,
            //   },
            // };
line 247 =  // id="panel1a-header"

../src/components/Modals/modalHoots.js
line 5 = // import styles from './ExportFileModal.module.scss';

../src/components/NavBar/NavBar.jsx
line 11 = // toggleRightPanel,
line 13 = // setProjectUrl,
          // resetToProjectUrl,
          // loadProject,
line 23 = // const browserIcon = require('../../assets/images/google-chrome.png');
          // const codeIcon = require('../../assets/images/visual-studio-code.png');
          // const homeIcon = require('../../assets/images/home.png');
line 30 = projectUrl, rightPanelDisplay,
line 41 =   /* switches between code and browser view */
  // const handleEditorToggle = () => {
  //   if (!inAboutPage) dispatchToGlobal(toggleRightPanel('codeEditorView'));
  // };

  /* switches between code and browser view */
  // const handleBrowserToggle = () => {
  //   if (inAboutPage) return;
  //   if (rightPanelDisplay === 'browserView' && projectUrl) {
  //     dispatchToGlobal(resetToProjectUrl());
  //   }
  //   if (!projectUrl) {
  //     dispatchToGlobal(setProjectUrl('https://google.com'));
  //   }
  //   dispatchToGlobal(toggleRightPanel('browserView'));
  // };
line 64 =   /*returns to project loader screen */
  // const handleClickHome = () => {
  //   dispatchToGlobal(loadProject(false));
  // };
line 93 =  {/* Deprecated as right panel is no longer closable and does not need a button to open*/}
      {/* Code View
      <button className={styles.navBtn} onClick={handleEditorToggle}>
        <img src={codeIcon} className={styles.icons} alt='codeview' title='Code View' />
        <span className={styles.tooltip}>Code View</span>
      </button> */}

      {/* Home Button. Deprecated as it results in redundant ptyProcess. Use Open folder to change directory. */}
      {/* <button className={styles.navBtn} onClick={handleBrowserToggle}>
        <img
          src={homeIcon}
          className={styles.icons}
          alt='Return home'
          title='Home'
          onClick={handleClickHome}
        />
        <span className={styles.tooltip}>Home</span>
      </button> */}

../src/components/NavBar/NavBar.module.scss
line 12 = // position: absolute;
          // top: 0;  
          // left: 0;

../src/components/ReactHooksTestComponent/Context
THE ENTIRE FOLDER CONTEXT:
THE ENTIRE FILE : context.jsx  = /*******
 *
 *
 * Unused file, this feature needs to be integrated with the HookUpdate component
 * Or the testing logic won't work
 *
 *
 ******/

// import React, { useContext, useRef, useEffect } from 'react';
// import { Draggable } from 'react-beautiful-dnd';
// import styles from './Context.module.scss';
// import { GlobalContext } from '../../../context/reducers/globalReducer';
// import { HooksTestCaseContext } from '../../../context/reducers/hooksTestCaseReducer';

// import {
//   deleteContexts,
//   updateContexts,
//   updateContextFilePath,
// } from '../../../context/actions/hooksTestCaseActions';
// import SearchInput from '../../SearchInput/SearchInput';

// const closeIcon = require('../../../assets/images/close.png');
// const dragIcon = require('../../../assets/images/drag-vertical.png');

// const Context = ({ context, index }) => {
//   const [{ filePathMap }] = useContext(GlobalContext);
//   const [, dispatchToHooksTestCase] = useContext(HooksTestCaseContext);

//   const handleChangeContextFields = (e, field) => {
//     let updatedContext = { ...context };
//     updatedContext[field] = e.target.value;
//     dispatchToHooksTestCase(updateContexts(updatedContext));
//   };

//   const handleClickDeleteContext = () => {
//     dispatchToHooksTestCase(deleteContexts(context.id));
//   };

//   const testDescription = useRef(null);

//   useEffect(() => {
//     if (testDescription && testDescription.current) {
//       testDescription.current.focus();
//     }
//   }, []);

//   return (
//     <Draggable draggableId={context.id.toString()} index={index}>
//       {(provided) => (
//         <div
//           ref={provided.innerRef}
//           {...provided.draggableProps}
//           {...provided.dragHandleProps}
//           id={styles.context}
//         >
//           <img src={closeIcon} id={styles.close} alt='close' onClick={handleClickDeleteContext} />

//           <div id={styles.contextHeader}>
//             <img src={dragIcon} alt='drag' />
//             <h3>Context</h3>
//           </div>

//           <div>
//             <div id={styles.querySelector}>
//               <div id={styles.contextFlexBox}>
//                 <div id={styles.contextBox}>
//                   <label htmlFor='contextFile' className={styles.queryLabel}>
//                     Import Context From
//                   </label>
//                   <SearchInput
//                     options={Object.keys(filePathMap)}
//                     dispatch={dispatchToHooksTestCase}
//                     action={updateContextFilePath}
//                     filePathMap={filePathMap}
//                   />
//                 </div>
//                 <div id={styles.serverInput}>
//                   <label htmlFor='test-statement'>Test description</label>
//                   <div
//                     style={{
//                       display: 'flex',
//                       justifyContent: 'spaceBetween',
//                     }}
//                   >
//                     <div id={styles.labelInputTest}>
//                       <br />
//                       <input
//                         ref={testDescription}
//                         type='text'
//                         id={styles.testStatement}
//                         onChange={(e) => handleChangeContextFields(e, 'testName')}
//                       />
//                     </div>
//                   </div>
//                 </div>
//               </div>
//               <div id={styles.dropdownFlex}>
//                 {/* drop downs */}
//                 <div id={styles.contextDrop}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Test Type
//                   </label>
//                   <select
//                     id='queryValue'
//                     onChange={(e) => handleChangeContextFields(e, 'queryValue')}
//                   >
//                     <option value='' />
//                     <option value='shows_default_value'>shows_default_value</option>
//                     <option value='shows_value_from_provider'>shows_value_from_provider</option>
//                     <option value='component_provides_context_value'>
//                       component_provides_context_value
//                     </option>
//                     <option value='renders_providers_+_consumers_normally'>
//                       renders_providers_+_consumers_normally
//                     </option>
//                   </select>
//                 </div>

//                 <div id={styles.contextDrop}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Query Variant
//                   </label>
//                   <select
//                     id='queryVariant'
//                     onChange={(e) => handleChangeContextFields(e, 'queryVariant')}
//                   >
//                     <option value='' />
//                     <option value='toHaveTextContext'>toHaveTextContext</option>
//                     <option value='toBeInTheDocument'>toBeInTheDocument</option>
//                     <option value='toBe'>toBe</option>
//                   </select>
//                 </div>

//                 <div id={styles.contextDrop}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Query Selector
//                   </label>
//                   <select
//                     id='querySelector'
//                     onChange={(e) => handleChangeContextFields(e, 'querySelector')}
//                   >
//                     <option value='' />
//                     <option value='getByText'>getByText</option>
//                   </select>
//                 </div>
//               </div>

//               <div id={styles.queryFlexBox}>
//                 {/* input boxes */}
//                 <div id={styles.contextBox}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Consumer Component
//                   </label>
//                   <input
//                     id='consumerComponent'
//                     placeholder='eg. nameOfConsumer'
//                     onChange={(e) => handleChangeContextFields(e, 'consumerComponent')}
//                   />
//                 </div>

//                 <div id={styles.contextBox}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Provider Component
//                   </label>
//                   <input
//                     id='providerComponent'
//                     placeholder='eg. nameOfProvider'
//                     onChange={(e) => handleChangeContextFields(e, 'providerComponent')}
//                   />
//                 </div>
//               </div>

//               <div id={styles.queryFlexBox}>
//                 <div id={styles.contextBox}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Context
//                   </label>
//                   <input
//                     id='context'
//                     placeholder='eg. nameOfContext'
//                     onChange={(e) => handleChangeContextFields(e, 'context')}
//                   />
//                 </div>

//                 <div id={styles.contextBox}>
//                   <label htmlFor='queryVariant' className={styles.queryLabel}>
//                     Value To Pass
//                   </label>
//                   <input
//                     id='values'
//                     placeholder='eg. theValueToPassWithContext'
//                     onChange={(e) => handleChangeContextFields(e, 'values')}
//                   />
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </Draggable>
//   );
// };

// export default Context;

THE ENTIRE FILE : Context.modules = @import '../../../assets/stylesheets/colors.scss';
// @import '../../../assets/stylesheets/fonts.scss';
// @import '../../../pages/LeftPanel/LeftPanel.module.scss';

// #context {
//   @include box-styling;
//   font-family: $raleway;
//   letter-spacing: 0.5px;
// }

// #close {
//   float: right;
// }

// #contextHeader {
//   @include box-header-alignment;
//   justify-content: flex-start;
//   display: flex;
//   align-items: center;
//   img {
//     width: 20px;
//     height: 20px;
//     margin: 0;
//     padding: 0;
//   }
//   h3 {
//     margin: 0;
//     padding: 0;
//   }
// }

// .queryLabel {
//   margin-bottom: 1px;
//   display: block;
// }

// #queryFlexBox {
//   display: flex;
//   align-items: center;
//   width: 100%;
// }

// #eventTypeFlexBox {
//   display: flex;
//   align-items: center;
//   margin-bottom: 15px;
// }

// #eventType {
//   width: 50%;
//   margin-right: 7%;
//   input {
//     margin-top: 6px;
//     width: 100%;
//   }
// }

// .eventValue {
//   // width: 50%;
//   input {
//     width: 90%;
//     margin-top: 6px;
//   }
// }

// #eventTypeVal {
//   width: 43%;
// }

// #querySelector {
//   margin-right: 9%;
//   select {
//     font-family: $raleway;
//     width: 100%;
//     height: 25px;
//     margin: 0 3px 0 0;
//     background-color: white;
//     border: 1px solid $light-gray;
//     font-size: 12px;
//     letter-spacing: 0.5px;
//     color: $dark-gray;
//   }
// }

// #contextFlexBox {
//   display: flex;
//   align-items: center;
//   margin-bottom: 15px;
// }

// #dropdownFlex {
//   display: flex;
//   align-items: center;
//   width: 111%;
//   margin-top: 1rem;
// }

// #query {
//   input {
//     width: 148%;
//   }
// }

// #hastooltip {
//   @include hastooltip($tooltip-transition-in-duration: 0.3s);
// }

// #tooltip {
//   min-width: 10em;
//   padding: 0.5em 0.75em;

//   box-shadow: 0 0.05em 0.15em rgba(black, 0.1);
//   @include tooltip;
// }

// #contextBox {
//   width: 50%;
//   margin-right: 7%;
//   input {
//     margin-top: 1px;
//     width: 100%;
//   }
//   position: relative;
// }

// #contextDrop {
//   margin-right: 7%;
//   width: 50%;
//   select {
//     margin-top: 0px;
//     font-family: $raleway;
//     width: 100%;
//     height: 25px;
//     background-color: white;
//     border: 1px solid $light-gray;
//     font-size: 12px;
//     letter-spacing: 0.5px;
//     color: $dark-gray;
//     margin-bottom: 11%;
//   }
// } 

../src/components/ReactHooksTestComponent/HookAssertion.jsx
line 100 =   {/* <div id={stylez.autoTool}>
      <input type='text' /> */}
        {/* </div> */}

../src/components/ReactTestComponent/Assertion/Assertion.jsx
line 19 =  // const dragIcon = require('../../../assets/images/drag-vertical.png');
line 118 = // id={styles2.autoCompleteMockData}

../src/components/ReactTestComponent/Assertion/Assertion.module.scss
line 42 = // #queryVariant {
          //   top: auto;
          //   bottom: 100%;
          // }
line 67 = // #query {
          //   input {
          //     width: 140%;
          //   }
          // }
../src/components/ReactTestComponent/DescribeRenderer/DescribeRenderer.jsx
line 8  = // const questionIcon = require('../../../assets/images/help-circle.png');
line 84 = {/* {JSON.stringify(provided)} */}

../src/components/ReactTestComponent/DescribleRenerer/DescribeRenderer.jsx
line  39 = // background-color: rgba(128, 128, 128, 0.20);
line 55 =  // border-bottom: 1px solid $mint;

../src/components/ReactTestComponent/ItRenderer/ItRenderer.jsx
line  54 = // type={describeId} // passed down automatically

../src/components/TestCase/AccTestCase.tsx
line 2 = import cn from 'classnames';

../src/components/TestCase/EndpointTestCase.tsx
line  4 = // import style from '../EndpointTestComponent/Endpoint.module.scss';

../src/components/ToolTip/ToolTpAsync.jsx
line 21 =   // return <span id={styles.tooltip}>{TOOLTIP_MAP_ASYNC}</span>;

../src/context/actions/endpointTestCaseActions.ts 
line 5 =   // UPDATE_SERVER_FILE_PATH: 'UPDATE_SERVER_FILE_PATH',

..src/context/reducers/hooksTestCaseReducers.ts
line 2 = // import { actionTypes } from '../actions/hooksTestCaseActions';
line 69 = // const createContexts = (statementId: number) => ({
//   id: statementId,
//   type: 'context',
//   queryVariant: '',
//   querySelector: '',
//   queryValue: '',
//   values: '',
//   textNode: '',
//   providerComponent: '',
//   consumerComponent: '',
//   context: '',
//   contextFileName: '',
//   contextFilePath: '',
// });
line 99 =  // if (el.hasOwnProperty('assertions')) {
line 138 = // statementId: state.statementId + 1,
line 172 = // hooksStatements.push(createHookUpdates(state.statementId));
           // hooksStatements.push(createContexts(state.statementId));
line 212 = // if (statement.type === 'hook-updates' || statement.type === 'hookRender') {
           //   console.log('statement within UPDATE_HOOKS_FILEPATH', action);
line 219 = // }
           // return statement;

../src/context/reducers/reduxTestCaseReducer.ts
line 58 =   // requestBody: '',
line 234 =  // if (statement.id === action.payload.id) {
line 248 =   // if (statement.id === action.payload.id) {

../src/context/useGenerateTest.jsx
line 711 =  // // Context Jest Test Code
    // const addContext = (context) => {
    //   testFileCode += `test('${context.testName}', () => {`;
    //   if (context.queryValue === 'shows_default_value') {
    //     testFileCode += `const mockValue = {Data: '${context.values}'}
    //       const { ${context.querySelector} } = render(<${context.consumerComponent}/>)
    //       expect(${context.querySelector}(mockValue.Data)).${context.queryVariant}('${context.values}')`;
    //   }
    //   if (context.queryValue === 'shows_value_from_provider') {
    //     testFileCode += `const mockValue = {Data: '${context.values}'}
    //       const { ${context.querySelector} } = render (
    //         <${context.context}.Provider value={mockValue}>
    //           <${context.consumerComponent}/>
    //         </${context.context}.Provider>
    //       )
    //       expect(${context.querySelector}(mockValue.Data)).${context.queryVariant}('${context.values}')`;
    //   }
    //   if (context.queryValue === 'component_provides_context_value') {
    //     testFileCode += `const mockValue = {Data: '${context.values}'}
    //       const { ${context.querySelector} } = render (
    //         <${context.providerComponent} value={mockValue}>
    //           <${context.context}.Consumer>
    //           {value => <span>Recieved: {value} </span>}
    //           <${context.context}.Consumer/>
    //         </${context.providerComponent}>
    //       )
    //       expect(${context.querySelector}(/^Recieved:/).textContent).${context.queryVariant}('${context.values}')`;
    //   }
    //   if (context.queryValue === 'renders_providers_+_consumers_normally') {
    //     testFileCode += `const mockValue = {Data: '${context.values}'}
    //       const { ${context.querySelector} } = render (
    //         <${context.providerComponent} value={mockValue}>
    //           <${context.consumerComponent}/>
    //         </${context.providerComponent}>
    //       )
    //       expect(${context.querySelector}(mockValue.Data).textContent).${context.queryVariant}('${context.values}')`;
    //   }
    //   testFileCode += '})\n\n';
    // };

    // // Endpoint Jest Test Code

../src/pages/About/LeftPanel/LeftPanel.module.scss

line 121 =   // &::before {
  //   content: '';
  //   position: absolute;
  //   // Draw another triangle to simulate a border.
  //   border-top: $tooltip-arrow-length solid $tooltip-border-color;
  //   border-left: ($tooltip-arrow-base / 2) solid transparent;
  //   border-right: ($tooltip-arrow-base / 2) solid transparent;
  //   // Center the triangle.
  //   margin-left: ($tooltip-arrow-base / -4);
  // }

../src/pages/ProjectLoader/ProjectLoader.jsx
 line 5 = // import { setProjectUrl, closeRightPanel } from '../../context/actions/globalActions';
// import { loadProject, toggleFileDirectory } from '../../context/actions/globalActions';
line 12 =  // const addHttps = (url) => {
  //   if (url.indexOf('http://') === 0 || url.indexOf('https://') === 0) {
  //     return url;
  //   } else if (url.startsWith('localhost')) {
  //     url = 'http://' + url;
  //     return url;
  //   } else {
  //     url = 'https://' + url;
  //     return url;
  //   }
  // };

  // const handleChangeUrl = (e) => {
  //   const testSiteURL = addHttps(e.target.value);
  //   dispatchToGlobal(setProjectUrl(testSiteURL));
  // };

  // const handleChangeAbout = () => {
  //   dispatchToGlobal(loadProject('about'));
  //   dispatchToGlobal(closeRightPanel());
  //   if (isFileDirectoryOpen) dispatchToGlobal(toggleFileDirectory());
  // };

  // const placehold =
  //   process.env.NODE_ENV === 'development' ? 'Dev mode do not fill out' : 'ex: localhost:3000';
line 59 = {/* Enter Starting URL */}
          {/* <div className={styles.contentBox}>
            <span className={styles.number}>01</span>
            <span className={styles.text}> Enter test site's URL</span> <br />
            <input type='text' autoFocus id={styles.url} placeholder={placehold} onChange={handleChangeUrl} />
          </div> */}
line 68 = {/* <span className={styles.number}>02</span> */}
line 75 = {/* <div id={styles.bottomDiv}>
          <button id={styles.helpBtn} onClick={handleChangeAbout}>
            <span className={styles.text}>Get Started</span>
          </button>
        </div> */}

../src/pages/RightPanel/RightPanel.jsx
line 10 = // import terminalStyles from '../../components/Terminal/TerminalView.module.scss';
// const closeIcon = require('../../assets/images/close.png');

// add tabviews (convert the code preview and browser preview) - mintyBois 4/16
// eslint-disable

line 20  // const handleCloseRightPanelView = () => {
  //   dispatchToGlobal(closeRightPanel());
  // };

  // Tabbed View
line 28 =     {/* <img src={closeIcon} id={styles.close} alt='close' onClick={handleCloseRightPanelView} /> */}

../src/utils/endpointTypes.ts
line 71 = // export type EndpointAction =
//    {
//       type:
//         | 'TOGGLE_ENDPOINT'
//         | 'CREATE_NEW_ENDPOINT_TEST'
//         | 'ADD_ENDPOINT'
//         | 'OPEN_INFO_MODAL'
//         | 'CLOSE_INFO_MODAL';
//     }
//   | { type: 'TOGGLE_POST'; index: number }
//   | { type: 'UPDATE_ENDPOINT_STATEMENTS_ORDER'; draggableStatements: string }
//   | { type: 'UPDATE_SERVER_FILEPATH'; serverFilePath: string; serverFileName: string }
//   | { type: 'DELETE_ENDPOINT' | 'ADD_HEADER' | 'ADD_ASSERTION'; id: number}
//   | { type: 'UPDATE_ENDPOINT'; endpoint: object; id: number}
//   | { type: 'UPDATE_STATEMENTS_ORDER'; draggableStatements: Array<EndpointStatements> }
//   | { type: 'DELETE_HEADER' | 'DELETE_ASSERTION'; index: number; id: number }
  
//   | { type: 'UPDATE_POST'; text: string; index: number }
//   | { type: 'UPDATE_ASSERTION'; id: number; index: number; assertion: Assertion }
//   | { type: 'TOGGLE_DB'; db: string | boolean }
//   | { type: 'UPDATE_DB_FILEPATH'; dbFilePath: string };

../src/utils/hooksTypes.ts
line 28 = // export interface Action {
//   type: string;
//   id?: number;
//   context?: string;
//   hook?: string;
//   parameters?: any;
//   expectedState?: any;
//   expectedValue?: any;
//   textNodes?: string;
//   queryVariant?: string;
//   querySelector?: string;
//   queryValue?: string;
//   values?: string;
//   providerComponent?: string;
//   consumerComponent?: string;
//   draggableStatements?: Array<HooksStatements>;
//   testName?: string;
//   index?: number;
//   text?: string;
//   contextFileName?: string;
//   contextFilePath?: string;
//   assertions?: Assertion;
//   callbackfunc?: Callback;
// }

../src/utils/reduzTypes.ts
line 132 = // interface OpenModalAction {
//   type: typeof actionTypes.OPEN_INFO_MODAL;
//   payload?: null;
// }

// interface CloseModalAction {
//   type: typeof actionTypes.CLOSE_INFO_MODAL;
//   payload?: null;
// }
